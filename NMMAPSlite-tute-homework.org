#+TITLE:NMMAPSlite Tute Homework
#+AUTHOR: Ivan Hanigan
#+email: ivan.hanigan@anu.edu.au
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
-----

* Introduction
 a tute to demo R codes for multiple regression modelling

 homework is to get the RR and 95 percent CIs for pm10tmean
* Tools
#+name:tools
#+begin_src R :session *R* :tangle main.R :eval no
  require(splines)
  if(!require(NMMAPSlite)) install.packages('NMMAPSlite');require(NMMAPSlite)
  initDB('data')
#+end_src
* Load
#+name:load
#+begin_src R :session *R* :tangle main.R :eval no
  
  cities <- getMetaData('cities')
  head(cities)
  # if we use a variable to set a city we can loop thru a list of city's later
  city_i <- 'Chicago'
  city <- subset(cities, cityname == city_i)$city
  data <- readCity(city)
  # we know from the NMMAPS papers that a smooth on time will control
  # for unmeasured temporal confounders such as season, trend and flu epidemics
  data$yy <- substr(data$date,1,4)
  numYears<-length(names(table(data$yy)))
  str(data)
  
#+end_src
* Do-modelling
#+name:do
#+begin_src R :session *R* :tangle main.R :eval no
  fit2 <- glm(cvd ~ agecat + pm10tmean +
   ns(tmax, df = 8) + ns(dptp, df = 4) + ns(time, df = 7*numYears),
   data = data, family = poisson)
#+end_src
* COMMENT Clean-model checking
#+name:clean
#+begin_src R :session *R* :tangle main.R :exports none :eval no

  # plot responses
  par(mfrow=c(2,2))
  termplot(fit2, se =T,terms='agecat')
  termplot(fit2, se =T,terms='pm10tmean')
  termplot(fit2, se =T,terms='ns(tmax, df = 8)')
  attr(terms(fit2),'term.labels')
  termplot(fit2, se =T,terms='ns(time, df = 7 * numYears)')
  dev.off()
#+end_src
* do-report RRs
Now we can get a matrix of the coefficients and standard errors.
#+name:do-report RRs 1
#+begin_src R :session *R* :tangle main.R :eval no
modout <- summary(fit2)$coeff
#+end_src
So we need to use the square brackets to select the right rows and columns and calculate:

$RR = e^{\beta}$ \\
$95CI_{lower} = e^{(\beta - 1.96 \times standardError)}$ \\
$95CI_{upper} = e^{(\beta + 1.96 \times standardError)}$ \\

#+name:answer
#+begin_src R :session *R* :tangle main.R :exports none :eval no
modout$RR <- exp(modout[,2])
modout$RRlci <- exp(modout[,2] - 1.96 * modout[,3])
modout$RRuci <- exp(modout[,2] + 1.96 * modout[,3])
#+end_src


* COMMENT func-collectResults
#+name:func
#+begin_src R :session *R* :tangle main.R :exports none :eval no
 
  ######################################################
  # get coefficients and RRs
  collectResults <- function(fit, name, covar, modeloutputsTable = NA){
    # a tool for extracting the results from our models
    # in to a table for the document
    modout <- data.frame(name,
     t(
      summary(fit)$coeff[
       which(row.names(summary(fit)$coeff) == covar),]
      ))
  
    modout$RR <- exp(modout[,2])
    modout$RRlci <- exp(modout[,2] - 1.96 * modout[,3])
    modout$RRuci <- exp(modout[,2] + 1.96 * modout[,3])
  
    modout$RRPct <- (exp(modout[,2])-1)*100
    modout$RRlciPct <- (exp(modout[,2] - 1.96 * modout[,3])-1)*100
    modout$RRuciPct <- (exp(modout[,2] + 1.96 * modout[,3])-1)*100
    colnames <- c('model', 'beta', 'se', 'z', 'p', 'RR','RRlci','RRuci','RRPct','RRlciPct','RRuciPct')
    names(modout) <-  colnames
  
    if(exists('modeloutputsTable')){
     modeloutputs <- rbind(modeloutputsTable,modout)
    } else {
     modeloutputs <- as.data.frame(matrix(nrow=0,ncol=11))
     names(modeloutputs) <-  colnames
     modeloutputs <- rbind(modeloutputs,modout)
    }
  
   return(modeloutputs)
  
   }
#+end_src
* COMMENT do-report RRs 2
#+name:do-report
#+begin_src R :session *R* :tangle main.R :exports none :eval no
 
  ######################################################
  # get the RRs
  results_out <- as.data.frame(matrix(nrow=0,ncol=11))
  names(results_out) <- c('model', 'beta', 'se', 'z', 'p', 'RR','RRlci','RRuci','RRPct','RRlciPct','RRuciPct')
  results_out <- collectResults(fit=fit2, name='nmmaps',
                            covar='pm10tmean',
                            modeloutputsTable = results_out)
  t(as.data.frame(results_out))
  results_out
  
#+end_src
  


* COMMENT R
#+begin_src sh :session *shell* 
whoami
#+end_src

* COMMENT checks
- [ ] one
- [X] two
- [ ] three
